<ws:if data="{{_isStickyEnabled(_options)}}">
   <!--Styles specified with attr are not merged, so as a temporary solution, we use the option.-->
   <!--https://online.sbis.ru/opendoc.html?guid=e692216c-8a18-4b42-8523-5434d436a502-->
   <div class="controls-StickyHeader controls_scroll_theme-{{ _options.theme }}
   {{_options.backgroundStyle ? ('controls-background-' + _options.backgroundStyle) : 'controls-StickyHeader_default-background'}}
   controls-StickyHeader_position
   {{_subPixelArtifactClass}} {{_topGapFixClass}}"
        style="{{_style + (_options.style || '')}}">
      <ws:if data="{{_canShadowVisible.top}}">
         <!-- We use visibility style instead of "display: none;" statement to prevent jumps when scrolling on iPad -->
         <div class="controls-Scroll__shadow controls-StickyHeader__shadow-top controls-Scroll__shadow_horizontal
                  {{ !_isTopShadowVisible ? ' ws-invisible' }}" data-qa="StickyHeader__shadow-top"
         ></div>
      </ws:if>

      <ws:if data="{{_canShadowVisible.left}}">
          <!-- We use visibility style instead of "display: none;" statement to prevent jumps when scrolling on iPad -->
          <div class="controls-Scroll__shadow controls-StickyHeader__shadow-left controls-Scroll__shadow_vertical
                 {{ !_isLeftShadowVisible ? ' ws-invisible' }}" data-qa="StickyHeader__shadow-left"
          ></div>
      </ws:if>

      <div name="observationTargetTop" class="controls-StickyHeader__observationTargetTop" style="{{ _getObserverStyle('top', _options.offsetTop, _options.shadowVisibility) }}"></div>
      <div name="observationTargetLeft" class="controls-StickyHeader__observationTargetLeft" style="{{ _getObserverStyle('left', 0, _options.shadowVisibility) }}"></div>
      <!-- Remove scope="{{_options}}" after complete https://online.sbis.ru/opendoc.html?guid=dd8d85ac-2024-41f6-b9b3-550b4413b566 -->
      <ws:partial template="{{_options.content}}"
                  attr:class="controls-StickyHeader__content"
                  scope="{{_options}}"
                  isHeaderFixed="{{!!_model.fixedPosition}}"
                  on:arrowClick="_notifyHandler('arrowClick')"
                  on:controlResize="_selfResizeHandler()"/>
      <div name="observationTargetRight" class="controls-StickyHeader__observationTargetRight" style="{{ _getObserverStyle('right', 0, _options.shadowVisibility) }}"></div>
      <div name="observationTargetBottomLeft" class="controls-StickyHeader__observationTargetBottomLeft" style="{{ _getObserverStyle('bottom', _options.offsetTop, _options.shadowVisibility) }}"></div>
      <div name="observationTargetBottomRight" class="controls-StickyHeader__observationTargetBottomRight" style="{{ _getObserverStyle('bottom', _options.offsetTop, _options.shadowVisibility) }}"></div>

      <ws:if data="{{_canShadowVisible.right}}">
          <!-- We use visibility style instead of "display: none;" statement to prevent jumps when scrolling on iPad -->
          <div class="controls-Scroll__shadow controls-StickyHeader__shadow-right controls-Scroll__shadow_vertical
                {{ !_isRightShadowVisible ? ' ws-invisible' }}" data-qa="StickyHeader__shadow-right"
          ></div>
      </ws:if>

      <ws:if data="{{_canShadowVisible.bottom}}">
         <!--We use visibility style insted of "display: none;" statement to prevent jumps when scrolling on iPad -->
         <!-- visibility: hidden; добавляет scrollHeight, хотя тень невидима. -->
         <!-- Проблема возникает например если свернуть последнюю группировку. -->
         <div class="controls-Scroll__shadow controls-StickyHeader__shadow-bottom controls-Scroll__shadow_horizontal
                  {{ !_isBottomShadowVisible ? (_isMobileIOS ? ' ws-invisible' : ' ws-hidden') }}"
              name="shadowBottom" data-qa="StickyHeader__shadow-bottom"></div>
      </ws:if>
   </div>
</ws:if>
<ws:else>
   <div>
      <ws:partial if="{{_options.content}}" template="{{_options.content}}" scope="{{_options}}"/>
   </div>
</ws:else>
