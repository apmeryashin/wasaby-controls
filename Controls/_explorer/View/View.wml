<div class="controls_list_theme-{{_options.theme}} controls-Explorer" on:keyDown="_onExternalKeyDown()">
   <Controls.list:DataContainer
      attr:class="controls-Explorer__wrapper"
      scope="{{_options}}"
      root="{{_getRoot(_options.root)}}"
      processError="{{true}}"
      on:breadCrumbsItemsChanged="_onBreadcrumbsChanged()"
   >
      <ws:content>
         <Controls.dragnDrop:Container on:documentDragStart="_documentDragStart()" on:documentDragEnd="_documentDragEnd()">
            <Controls._explorer.PathController
               name="pathController"

               scope="{{_options}}"
               viewMode="{{_viewMode}}"
               rootVisible="{{_dragOnBreadCrumbs}}"
               highlighter="{{[_breadCrumbsDragHighlighter]}}"
               root="{{content._options.root}}"
               breadCrumbsItems="{{content._options.breadCrumbsItems || null}}"

               on:hoveredItemChanged="_hoveredCrumbChanged()"
               on:arrowActivated="_notifyHandler('arrowActivated')"
               on:arrowClick="_notifyHandler('arrowClick')"
               on:itemClick="_onBreadCrumbsClick()"
            >
               <Controls.tree:TreeControl
                  name="treeControl"

                  scope="{{_options}}"
                  navigation="{{ _navigation }}"
                  root="{{content._options.root}}"
                  supportExpand="{{_viewMode === 'table'}}"
                  autoColumnsRecalculating="{{_options.useColumns && _viewMode === 'list'}}"
                  disableVirtualScroll="{{_viewMode === 'tile' || _options.useColumns && _viewMode === 'list'}}"

                  viewName="{{_viewName}}"
                  itemContainerGetter="{{_itemContainerGetter}}"
                  viewModelConstructor="{{_viewModelConstructor}}"
                  plainItemsContainer="{{!(_options.useColumns && _viewMode === 'list')}}"

                  header="{{content.header}}"
                  headerVisibility="{{ _headerVisibility }}"

                  markerStrategy="{{_markerStrategy}}"
                  markerVisibility="{{ _options.markerVisibility }}"

                  actionMode="{{_viewMode ==='tile' ? _options.actionMode : 'strict'}}"
                  actionAlignment="{{ _viewMode === 'tile' ? 'vertical' : _options.actionAlignment }}"
                  actionCaptionPosition="{{ _viewMode === 'tile' ? 'none' : _options.actionCaptionPosition }}"

                  itemsSelector="{{_itemsSelector}}"
                  groupTemplate="{{_viewMode === 'tile' ? _options.tileGroupTemplate : _options.groupTemplate}}"
                  emptyTemplate="{{_getEmptyTemplate(_viewMode, _options.emptyTemplate, _options.listEmptyTemplate)}}"
                  itemTemplate="{{_getItemTemplate(_viewMode, _options.itemTemplate, _options.listItemTemplate, _options.tileItemTemplate)}}"

                  dragControlId="{{ _dragControlId }}"
                  canStartDragNDrop="{{ _canStartDragNDrop }}"

                  itemsSetCallback="{{_itemsSetCallback}}"
                  itemsReadyCallback="{{_itemsReadyCallback}}"

                  _recreateCollection="{{_recreateCollection}}"
                  _needSetMarkerCallback="{{_needSetMarkerCallback}}"
                  _initBreadCrumbsMode="{{_searchInitialBreadCrumbsMode}}"

                  attr:class="controls-Explorer__view"
                  on:itemClick="_onItemClick()"
                  on:itemMouseDown="_notifyHandler('itemMouseDown')"
                  on:itemMouseLeave="_notifyHandler('itemMouseLeave')"
                  on:itemMouseMove="_notifyHandler('itemMouseMove')"
                  on:checkboxClick="_notifyHandler('checkboxClick')"
                  on:itemSwipe="_notifyHandler('itemSwipe')"
                  on:beforeBeginEdit="_notifyHandler('beforeBeginEdit')"
                  on:drawItems="_notifyHandler('drawItems')"
                  on:afterBeginEdit="_notifyHandler('afterBeginEdit')"
                  on:beforeEndEdit="_notifyHandler('beforeEndEdit')"
                  on:afterEndEdit="_notifyHandler('afterEndEdit')"
                  on:actionClick="_notifyHandler('actionClick')"
                  on:dragStart="_notifyHandler('dragStart')"
                  on:dragEnd="_notifyHandler('dragEnd')"
                  on:hoveredItemChanged="_notifyHandler('hoveredItemChanged')"
                  on:hoveredCellChanged="_notifyHandler('hoveredCellChanged')"
                  on:rootChanged="_notifyHandler('rootChanged')"
                  on:changeDragTarget="_notifyHandler('changeDragTarget')"
                  on:dragEnter="_notifyHandler('dragEnter')"
                  on:markedKeyChanged="_notifyHandler('markedKeyChanged')"
                  on:beforeMarkedKeyChanged="_notifyHandler('beforeMarkedKeyChanged')"
                  on:selectedKeysChanged="_notifyHandler('selectedKeysChanged')"
                  on:selectedLimitChanged="_notifyHandler('selectedLimitChanged')"
                  on:excludedKeysChanged="_notifyHandler('excludedKeysChanged')"
                  on:beforeSelectionChanged="_notifyHandler('beforeSelectionChanged')"
                  on:keyDown="_onExplorerKeyDown()"
                  on:sortingChanged="_notifyHandler('sortingChanged')"
                  on:itemExpanded="_notifyHandler('itemExpanded')"
                  on:itemCollapsed="_notifyHandler('itemCollapsed')"
                  on:itemExpand="_notifyHandler('itemExpand')"
                  on:itemCollapse="_notifyHandler('itemCollapse')"
                  on:afterItemExpand="_notifyHandler('afterItemExpand')"
                  on:afterItemCollapse="_notifyHandler('afterItemCollapse')"
                  on:beforeItemExpand="_notifyHandler('beforeItemExpand')"
                  on:beforeItemCollapse="_notifyHandler('beforeItemCollapse')"
                  on:expandedItemsChanged="_notifyHandler('expandedItemsChanged')"
                  on:collapsedItemsChanged="_notifyHandler('collapsedItemsChanged')"
                  on:editArrowClick="_notifyHandler('editArrowClick')"
                  on:navigationParamsChanged="_notifyHandler('navigationParamsChanged')"
                  on:tagClick="_notifyHandler('tagClick')"
                  on:tagHover="_notifyHandler('tagHover')"
               />
            </Controls._explorer.PathController>
         </Controls.dragnDrop:Container>
      </ws:content>
   </Controls.list:DataContainer>
</div>
