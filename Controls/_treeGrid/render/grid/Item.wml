<ws:template name="EXPANDER">
   <div class="{{ item.getExpanderClasses(expanderIcon, expanderSize, expanderIconSize, expanderIconStyle) }}"
        attr:data-qa="{{ item.listElementName }}-expander"></div>
</ws:template>

<ws:template name="COLUMN">
   <div if="{{ gridColumn.shouldDisplayMarker(marker) }}"
        class="{{ gridColumn.getMarkerClasses(markerClassName, itemPadding) }}"
        attr:data-qa="marker"></div>

   <ws:partial template="{{ gridColumn.getTemplate() }}"
               scope="{{ gridColumn.config.templateOptions }}"
               attr:key="{{ gridColumn.getInstanceId() }}"
               item="{{ (item || itemData) }}"
               column="{{ gridColumn }}"
               itemData="{{ gridColumn }}"
               gridColumn="{{ gridColumn }}"
               colData="{{ gridColumn }}"
               theme="{{ theme }}"
               style="{{ style }}"
               cursor="{{ cursor }}"
               backgroundColorStyle="{{ backgroundColorStyle }}"
               backgroundStyle="{{ backgroundStyle }}"
               itemActionsTemplate="{{ itemActionsTemplate }}"
               itemActionsClass="{{ itemActionsClass }}"
               templateHighlightOnHover="{{ templateHighlightOnHover }}"
               hoverBackgroundStyle="{{ hoverBackgroundStyle }}"
               fontColorStyle="{{ fontColorStyle }}"
               fontSize="{{ fontSize }}"
               fontWeight="{{ fontWeight }}"
               tagTemplate="{{ gridColumn.TagCell ? tagTemplate : undefined }}"
               tagStyle="{{ gridColumn.TagCell ? tagStyle : undefined }}"
               editArrowTemplate="{{ editArrowTemplate }}">
      <ws:ladderWrapper>
         <ws:partial template="{{ladderWrapper.content}}"
                     if="{{ (item || itemData).shouldDrawLadderContent(ladderWrapper.ladderProperty, ladderWrapper.stickyProperty) }}"
                     attr:class="{{ (item || itemData).getLadderWrapperClasses(ladderWrapper.ladderProperty, ladderWrapper.stickyProperty) }}"/>
      </ws:ladderWrapper>
      <ws:multiSelectTemplate>
         <ws:partial template="{{ (item || itemData).getMultiSelectTemplate() }}" item="{{ (item || itemData) }}" />
      </ws:multiSelectTemplate>
      <ws:beforeContentTemplate>
          <!-- Экспандер узлов и отступ под экспандер у записей дерева выводится перед контентом ячейки. -->
          <!-- Рендер экспандера обязан быть внутри блока, который обеспечивает отступы, обводку редактируемой записи и -->
          <!-- другие визуальные решения, регулируемые опциями на шаблоне колонки. В противном случае возникают проблемы  -->
          <!-- например, опция cursor="default" на колонке не влияет на область, где расположен отступ под иерархию/экспандер. -->
          <ws:if data="{{(item || itemData).shouldDisplayExpanderBlock(gridColumn)}}">
              <ws:if data="{{ (item || itemData).shouldDisplayLevelPadding(withoutLevelPadding) }}">
                  <ws:for data="i in (item || itemData).getLevel() - 1">
                      <div class="{{(item || itemData).getLevelIndentClasses(expanderSize, levelIndentSize)}}"></div>
                  </ws:for>
              </ws:if>
              <ws:if data="{{ (item || itemData).shouldDisplayExpander(expanderIcon, 'default') }}">
                  <ws:partial template="EXPANDER" item="{{ (item || itemData) }}"/>
              </ws:if>
              <ws:else data="{{(item || itemData).shouldDisplayExpanderPadding(expanderIcon, expanderSize)}}">
                  <div class="{{(item || itemData).getExpanderPaddingClasses(expanderSize)}}"></div>
              </ws:else>
          </ws:if>
      </ws:beforeContentTemplate>
      <ws:afterContentTemplate>
         <!-- Стрелка редактирования -->
         <ws:if data="{{ afterContentTemplate.shouldDisplayEditArrow && editArrowTemplate }}">
            <ws:partial template="{{ editArrowTemplate }}" item="{{ (gridColumn || itemData).getOwner() }}" textOverflow="{{(gridColumn || itemData).config.textOverflow}}"/>
         </ws:if>

         <!-- Тэг -->
         <div if="{{ (gridColumn || itemData).TagCell && (gridColumn || itemData).shouldDisplayTag(afterContentTemplate.tagStyle) }}"
              class="{{ (gridColumn || itemData).getTagClasses() }}">
            <ws:partial template="{{ afterContentTemplate.tagTemplate }}"
                        tagStyle="{{ (gridColumn || itemData).getTagStyle(afterContentTemplate.tagStyle) }}"
                        item="{{ (item || itemData) }}"
                        columnIndex="{{ (gridColumn || itemData).getColumnIndex() }}"/>
         </div>

          <!-- Экспандер узлов дерева выводится после контентом ячейки. -->
          <ws:if data="{{ item.shouldDisplayExpanderBlock(gridColumn) && item.shouldDisplayExpander(expanderIcon, 'right') }}">
            <ws:partial template="EXPANDER" item="{{ (item || itemData) }}"/>
         </ws:if>
      </ws:afterContentTemplate>
      <ws:expanderTemplate>
          <ws:if data="{{ item.shouldDisplayExpander(afterContentTemplate.expanderIcon, 'custom') }}">
              <ws:partial template="EXPANDER" item="{{ (item || itemData) }}"/>
          </ws:if>
      </ws:expanderTemplate>
   </ws:partial>

   <ws:if data="{{ gridColumn.ItemActionsCell && gridColumn.shouldDisplayItemActions() }}">
      <ws:if data="{{ (item || itemData).isSwiped() && itemActionsPosition !== 'outside' }}">
         <ws:partial template="{{ swipeTemplate }}"
                     highlightOnHover="{{ highlightOnHover }}" />
      </ws:if>
      <ws:else data="{{ itemActionsPosition !== 'custom' }}">
         <ws:partial template="{{ itemActionsTemplate }}"
                     itemData="{{ item || itemData }}"
                     itemActionsClass="{{ itemActionsClass }}"
                     highlightOnHover="{{ highlightOnHover }}"/>
      </ws:else>
   </ws:if>

   <ws:if data="{{ (gridColumn || itemData).Draggable && (gridColumn || itemData).shouldDisplayDraggingCounter() }}">
      <span class="controls-ListView__item-dragging-counter">{{ (item || itemData).getDraggedItemsCountString() }}</span>
   </ws:if>
</ws:template>


<ws:if data="{{ (item || itemData).shouldWrapInScrollGroup(isSticked) }}">
   <Controls.scroll:Group>
      <div attr:data-qa="{{ (item || itemData).listElementName }}"
           attr:class="{{ (item || itemData).getItemClasses({
           'highlightOnHover': highlightOnHover,
           'cursor': cursor,
           'clickable': clickable,
           'showItemActionsOnHover': showItemActionsOnHover
       }) }}">
         <ws:for data="column in (item || itemData).getColumns()">
			 <ws:if data="{{ column.isStickied(isSticked) }}">
				<Controls.scroll:StickyBlock position="{{ column.getStickyHeaderPosition(stickyCallback) }}"
											  mode="{{ column.getStickyHeaderMode(stickyCallback) }}"
											  shadowVisibility="{{column.shadowVisibility}}"
											  backgroundStyle="{{ column.getStickyBackgroundStyle() }}"
											  _isIosZIndexOptimized="{{ (item || itemData).isIosZIndexOptimized() }}"
											  fixedZIndex="{{ column.getZIndex()}}"
											  attr:key="sticky_{{ column.getInstanceId() }}"
											  attr:class="{{ column.getWrapperClasses(backgroundColorStyle, highlightOnHover, hoverBackgroundStyle) }}"
											  attr:style="{{ column.getWrapperStyles(containerSize) }} {{ column.isHidden() ? 'ws-hidden' }}"
											  attr:data-qa="{{ column.listElementName }}">
				   <ws:partial template="COLUMN" gridColumn="{{ column }}" if="{{ !column.isHidden() }}"/>
				</Controls.scroll:StickyBlock>
			 </ws:if>
			 <ws:else>
				 <div class="{{ column.getWrapperClasses(backgroundColorStyle, highlightOnHover, hoverBackgroundStyle) }} {{ column.isHidden() ? 'ws-hidden' }}"
					  style="{{ column.getWrapperStyles(containerSize) }}"
					  attr:data-qa="{{ column.listElementName }}">
					 <ws:partial template="COLUMN" gridColumn="{{ column }}" if="{{ !column.isHidden() }}"/>
				 </div>
			 </ws:else>
         </ws:for>
      </div>
   </Controls.scroll:Group>
</ws:if>
<ws:else>
   <div attr:data-qa="{{ (item || itemData).listElementName }}"
        attr:class="{{ (item || itemData).getItemClasses({
           'highlightOnHover': highlightOnHover,
           'cursor': cursor,
           'clickable': clickable,
           'showItemActionsOnHover': showItemActionsOnHover
       }) }}">
      <ws:for data="column in (item || itemData).getColumns()">
         <div class="{{ column.getWrapperClasses(backgroundColorStyle, highlightOnHover, hoverBackgroundStyle) }} {{ column.isHidden() ? 'ws-hidden' }}"
              style="{{ column.getWrapperStyles(containerSize) }}"
              attr:data-qa="{{ column.listElementName }}">
            <ws:partial template="COLUMN" gridColumn="{{ column }}" if="{{ !column.isHidden() }}"/>
         </div>
      </ws:for>
   </div>
</ws:else>
