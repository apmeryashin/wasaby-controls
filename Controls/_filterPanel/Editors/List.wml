<ws:template name="listBase">
    <Controls.Container.Async templateName="{{_options.parentProperty ? 'Controls/treeGrid:View' : 'Controls/grid:View'}}">
        <ws:partial template="{{content.resolvedTemplate}}"
                    name="gridView"
                    filter="{{_filter}}"
                    keyProperty="{{_options.keyProperty}}"
                    source="{{_options.source}}"
                    sourceController="{{_options.sourceController}}"
                    parentProperty="{{_options.parentProperty}}"
                    nodeProperty="{{_options.nodeProperty}}"
                    bind:expandedItems="_expandedItems"
                    root="{{_options.root}}"
                    dataLoadCallback="{{_options.dataLoadCallback}}"
                    sorting="{{_options.sorting}}"
                    navigation="{{_navigation}}"
                    columns="{{_columns}}"
                    backgroundStyle="transparent"
                    footerTemplate="{{footerTemplate}}"
                    multiSelectVisibility="onhover"
                    markerVisibility="{{_options.multiSelect ? 'hidden' : 'onactivated'}}"
                    itemsReadyCallback="{{_itemsReadyCallback}}"
                    itemActions="{{_itemActions}}"
                    itemActionVisibilityCallback="{{_itemActionVisibilityCallback}}"
                    style="{{_options.style}}"
                    attr:class="controls_toggle_theme-{{_options.theme}} controls-EditorList_style-{{_options.style}}"
                    on:itemClick="_handleItemClick()"
                    markedKey="{{_markedKey}}"
                    selectedKeys="{{_selectedKeys}}">
            <ws:itemTemplate>
                <ws:partial template="{{_options.parentProperty ? 'Controls/treeGrid:ItemTemplate' : 'Controls/grid:ItemTemplate'}}"
                            marker="{{_options.markerStyle === 'primary' ||
                                        itemTemplate.item.key === _options.emptyKey ||
                                        itemTemplate.item.key === _options.selectedAllKey}}"/>
            </ws:itemTemplate>
            <ws:multiSelectTemplate>
                <ws:if data="{{_options.markerStyle !== 'primary' &&
                                !(multiSelectTemplate.item.key === _options.emptyKey ||
                                multiSelectTemplate.item.key === _options.selectedAllKey)}}">
                    <ws:partial template="{{_options.multiSelect ? 'Controls/list:MultiSelectTemplate' : 'Controls/list:MultiSelectCircleTemplate'}}"
                                style="{{_options.style}}"
                                attr:class="controls-ListEditor__multiSelect"
                                on:click="_handleCheckBoxClick()"/>
                </ws:if>
            </ws:multiSelectTemplate>
        </ws:partial>
    </Controls.Container.Async>
</ws:template>

<ws:template name="listEditor">
   <ws:if data="{{_options.selectorTemplate}}">
      <ws:partial template="listBase">
         <ws:footerTemplate>
             <ws:partial template="Controls/grid:FooterTemplate">
                 <div class="controls-EditorList__footer">
                     <Controls.toggle:BigSeparator contrastBackground="{{false}}"
                                                   iconSize="l"
                                                   on:click="_handleFooterClick()"/>
                 </div>
             </ws:partial>
         </ws:footerTemplate>
      </ws:partial>
   </ws:if>
   <ws:else>
      <ws:partial template="listBase"/>
   </ws:else>
</ws:template>

<div class="controls-FilterEditors__list">
   <ws:if data="{{_options.multiSelect}}">
      <ws:partial template="listEditor" on:selectedKeysChanged="_handleSelectedKeysChanged()"/>
   </ws:if>
   <ws:else>
      <Controls.Container.Async templateName="Controls/multiselection:SingleSelection">
         <ws:partial template="{{content.resolvedTemplate}}"
                     on:selectedKeyChanged="_handleSelectedKeyChanged()">
            <ws:partial template="listEditor"/>
         </ws:partial>
      </Controls.Container.Async>
   </ws:else>
</div>
